<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Hi. I'm Scott Zhu]]></title>
  <link href="http://zhuhuihuihui.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://zhuhuihuihui.github.io/"/>
  <updated>2014-07-26T18:26:45+08:00</updated>
  <id>http://zhuhuihuihui.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Manage Xcode project using Github]]></title>
    <link href="http://zhuhuihuihui.github.io/blog/2014/07/24/link-a-xcode-project-to-github-repo/"/>
    <updated>2014-07-24T18:52:58+08:00</updated>
    <id>http://zhuhuihuihui.github.io/blog/2014/07/24/link-a-xcode-project-to-github-repo</id>
    <content type="html"><![CDATA[<p>Use <a href="github.com">Github</a> to source control your Xcode project is really cool and rather convenient. Many of you may have tried to upload or link your current Xcode project to Github, but found it’s annoying because you always got some slight problems that stopped you from reaching there.</p>

<p>Here, i’d like to tell you a really simple way to quickly upload  your current project, or a new project, to Github and start to source control it immediately.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS7 Auto Layout]]></title>
    <link href="http://zhuhuihuihui.github.io/blog/2014/07/22/ios7-auto-layout/"/>
    <updated>2014-07-22T22:33:56+08:00</updated>
    <id>http://zhuhuihuihui.github.io/blog/2014/07/22/ios7-auto-layout</id>
    <content type="html"><![CDATA[<p>If you don’t supply any constraints at all, Xcode <strong>automatically</strong> assigns a set of default constraints, known as the automatic constraints. <em>It does this at compile time when your app is built, not at design time.</em></p>

<p>Xcode only creates automatic constraints if you did not set any constraints of your own. As soon as you add a single constraint, you tell Xcode that you’re now taking responsibility for this view. Xcode will no longer make any automatic constraints and expects you to add any other constraints this view needs.</p>

<p>When it comes to Auto Layout, <strong>orange is bad</strong>. Interface Builder drew two orange boxes: The <code>dashed box</code> displays the view’s frame according to Auto Layout. The <code>solid orange box</code> is the view’s frame according to how you placed it in the scene.</p>

<p><img src="http://cdn2.raywenderlich.com/wp-content/uploads/2013/09/Constraints-button-top-right.png" title="dashed box &amp; solid orange box" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use NSCoding]]></title>
    <link href="http://zhuhuihuihui.github.io/blog/2014/02/25/how-to-use-nscoding/"/>
    <updated>2014-02-25T00:09:04+08:00</updated>
    <id>http://zhuhuihuihui.github.io/blog/2014/02/25/how-to-use-nscoding</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s say you want to archive or save a object called <code>City</code>. The <code>City.h</code> is declared as below:
```objectivec</p>

<pre><code>@interface City : NSObject

@property (nonatomic, strong) NSString *name;
@property (nonatomic, strong) NSString *state;
@property (nonatomic) NSInteger population;
@property (nonatomic, strong) NSString *note;

@end
</code></pre>

<p>```</p>

<p>The first thing you need to do is to make your class confirm to <code>NSCoding</code> protocol. This is simply telling the system,</p>

<blockquote><p>&ldquo;Ok, i&rsquo;m gonna use NSCoding to help archive and unarchive this class.&rdquo;</p></blockquote>

<p>Next, you need to add two methods to your <code>City.h</code>, which will actually help you doing the archive and unarchive works.
```objectivec</p>

<pre><code>- (id)initWithCoder:(NSCoder *)aDecoder;

- (void)encodeWithCoder:(NSCoder *)aCoder;
</code></pre>

<p><code>
You will need to implement these two methods by yourself, but you will never call these two method manually. We will explain it later. Add implementation of these two methods to `City.m`,
</code>objectivec</p>

<pre><code>- (void)encodeWithCoder:(NSCoder *)aCoder
{
    [aCoder encodeObject:self.name forKey:@"name"];
    [aCoder encodeObject:self.state forKey:@"state"];
    [aCoder encodeObject:[NSNumber numberWithInteger:self.population] forKey:@"population"];
    [aCoder encodeObject:self.note forKey:@"note"];
}

- (id)initWithCoder:(NSCoder *)aDecoder
{
    self = [super init];
    if (self)
    {
        self.name = [aDecoder decodeObjectForKey:@"name"];
        self.state = [aDecoder decodeObjectForKey:@"state"];
        self.population = [[aDecoder decodeObjectForKey:@"population"] integerValue];
        self.note = [aDecoder decodeObjectForKey:@"note"];
    }
    return self;
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
