<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Hi. I'm Scott Zhu]]></title>
  <link href="http://zhuhuihuihui.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://zhuhuihuihui.github.io/"/>
  <updated>2015-03-01T12:41:50+07:00</updated>
  <id>http://zhuhuihuihui.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Layout margin comes with iOS8]]></title>
    <link href="http://zhuhuihuihui.github.io/blog/2015/03/01/layout-margin-comes-with-ios8/"/>
    <updated>2015-03-01T12:40:30+07:00</updated>
    <id>http://zhuhuihuihui.github.io/blog/2015/03/01/layout-margin-comes-with-ios8</id>
    <content type="html"><![CDATA[<blockquote><p>Setting your constraints relative to margin in a xib file or storyboard <strong>DOES NOT</strong> make your app crash on iOS7, and it <strong>DOES NOT</strong> make a UI difference on your iOS7 device neither, as long as you don&rsquo;t touch the <code>UIView.layoutMargins</code> and <code>UIView.preservesSuperviewLayoutMargins</code> properties in your code.</p></blockquote>

<h3>What is Margins in iOS8</h3>

<p>Layout margins represent padding around the <strong>interior</strong> of a <code>UIView</code> that the layout system can use when laying out subviews &ndash; to ensure that a gap is left between the edge of a view and a subview. In this respect it is very much like the padding property associated with blocks in CSS.</p>

<p><img src="https://dl.dropboxusercontent.com/s/8y3tavoeoritz19/Screen%20Shot%202558-02-23%20at%204.04.17%20PM.png?dl=0" alt="enter image description here" /></p>

<p>By default, a <code>UIView</code> has layout margins of 8 points on each side, and this can not be changed in Interface Builder, but by setting the <code>UIView.layoutMargins</code> property in the code which is only available on iOS8. I think iOS7 has its way to detect if you&rsquo;ve set your constraints relative to margins or not, and it simply gives the constraints that related to margins extra 8 points space. However you can not change it because there&rsquo;s no such property in iOS7.</p>

<blockquote><p>You can get IB to display the margins with <strong>Editor > Canvas > Show Layout Rectangles:</strong>
<img src="https://dl.dropboxusercontent.com/s/yahgyf9jnumbovl/show_layout_rectangles.png?dl=0" alt="enter image description here" /></p></blockquote>

<p>Margins itself doesn&rsquo;t affect the contents of your view at all. Every <code>UIView</code> come with its margins by default, it&rsquo;s still there even if you don&rsquo;t use it, not affecting anything. It only comes into use when you&rsquo;re setting up a constraint that is related to margins.  It&rsquo;s only used to help you layout your view and subview.</p>

<h3>How to use Margins</h3>

<p>The only way to get margins involved in IB is to check the <strong>Relative to margin</strong> item while setting up your constraints. This is another way of declaring <em>Use my margins instead of my edges while laying out me.</em></p>

<p><img src="https://dl.dropboxusercontent.com/s/jea4s3m8zey4q6l/Screen%20Shot%202558-02-23%20at%204.57.25%20PM.png?dl=0" alt="enter image description here" /></p>

<p>Let&rsquo;s take a look at four different ways of setting up a leading constraint between a view and its subview. In this case of the constraint, the first item is subview&rsquo;s leading and the second item is superview&rsquo;s leading. While the leading is just a concept here, but mark and unmark the <strong>Relative to margin</strong>  of each item, you can actually select the left edge or left margin as your leading here to use as your leading to layout your views.</p>

<ol>
<li>First item(uncheck), second item(check). In this case, we&rsquo;re declaring that subview&rsquo;s left edge should align to superview&rsquo;s left margin(as what is shown in the image).<img src="https://dl.dropboxusercontent.com/s/r1bnsky2mahq9mw/Screen%20Shot%202558-02-23%20at%205.13.32%20PM.png?dl=0" alt="enter image description here" /></li>
<li>First item(uncheck), second item(uncheck), both using edge not margin. In this case, we&rsquo;re declaring that subview&rsquo;s left edge should align to superview&rsquo;s left edge. <img src="https://dl.dropboxusercontent.com/s/ncj55zl5mz78r4z/Screen%20Shot%202558-02-23%20at%205.18.30%20PM.png?dl=0" alt="enter image description here" /></li>
<li>First item(check), second item(uncheck). In this case, we&rsquo;re declaring that subview&rsquo;s left margin should align to superview&rsquo;s left edge. This kind of layout actually has made the subview overlap the superview.<img src="https://dl.dropboxusercontent.com/s/cc6a8gaxnz18cbu/Screen%20Shot%202558-02-23%20at%205.23.36%20PM.png?dl=0" alt="enter image description here" /></li>
<li>First item(check), second item(check).  This actually has a same effect as case 2, since both subview and superview has a same default margin. We&rsquo;re declaring that subview&rsquo;s left margin should align to superview&rsquo;s left margin. <img src="https://dl.dropboxusercontent.com/s/ncj55zl5mz78r4z/Screen%20Shot%202558-02-23%20at%205.18.30%20PM.png?dl=0" alt="enter image description here" /></li>
</ol>


<h3>What is good with Margins</h3>

<p>This new feature comes with iOS8 doesn&rsquo;t have a big impact on our way of developing UI if we&rsquo;re not using the margins. But using it correctly can facilitates out development a bit in the case if we have many subviews displayed in a superview, and all the subviews share a same leading, top,&hellip; space to the superview. Because in this case, if we set all constraints with a fixed spacing, once there comes a change on the spacing we have to update the constraints one by one. However if margins were used, we can just reset the margin of the superview by just single line of code like,</p>

<p><code>
self.rootView.layoutMargins = UIEdgeInsetsMake(0, 50, 0, 0);
</code>
However, this is only available on iOS8.</p>

<p>In the following case, all subviews' left edges are aligned to superview&rsquo;s left margin. Thus, changing superview&rsquo;s left margin can affect all subviews at the same time.</p>

<p><img src="https://dl.dropboxusercontent.com/s/ggmjfujf1vm9by0/Screen%20Shot%202558-02-23%20at%205.47.24%20PM.png?dl=0" alt="enter image description here" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Attach Stars to The End of a UILabel]]></title>
    <link href="http://zhuhuihuihui.github.io/blog/2015/02/14/attach-stars-to-the-end-of-a-uilabel/"/>
    <updated>2015-02-14T00:23:59+07:00</updated>
    <id>http://zhuhuihuihui.github.io/blog/2015/02/14/attach-stars-to-the-end-of-a-uilabel</id>
    <content type="html"><![CDATA[<p>In the past few days, I came across with a problem that when dealing with <code>UILabel</code>, which it&rsquo;s content itself is a <code>NSString</code>. I need to</p>

<ul>
<li>Attach some images (<em>In my case, some stars</em>) right by the end of the text in the <code>UILabel</code></li>
<li>When there isn&rsquo;t enough space in the end of the text for displaying the images, it <strong>auto wraps</strong> to the <strong>next line</strong>.  Just like how UILabel deals with words wapping.</li>
<li>Attach it at whichever place in the text as I want</li>
</ul>


<p>Here is how the effect looks like when it&rsquo;s done.</p>

<ul>
<li>When there is enough space in the end, <img src="https://dl.dropboxusercontent.com/s/z1ia03z30sb2dzf/enough%20space.png?dl=0" alt="enter image description here" /></li>
<li>When there is no enough space in the end, <img src="https://dl.dropboxusercontent.com/s/8kv5kp7hspo5k0y/no%20enough%20space.png?dl=0" alt="enter image description here" /></li>
</ul>


<p>So my way here to tackle this issue, is to use <code>NSTextAttachment</code>. <code>NSTextAttachment</code> takes a <code>UIImage</code> as argument , the <code>NSTextAttachment</code> itself then can be attached to an empty <code>NSAttributedString</code> by calling:</p>

<p><code>objectivec
[NSAttributedString attributedStringWithAttachment:starViewAsAttachment];
</code></p>

<p>Now you got a <code>NSAttributedString</code> with the image you want just like a normal word in it. To insert it anywhere in a text, you just play with it like a normal String.</p>

<p>Here is my complete code, here I only attaching the image to the end of the text. However this technique can be apply to any place inside a text.</p>

<p>```objectivec
NSTextAttachment *starViewAsAttachment = [[NSTextAttachment alloc] init];</p>

<pre><code>starViewAsAttachment.image = [UIImage imageNamed:@"Your image"];
NSAttributedString *attachmentString = [NSAttributedString attributedStringWithAttachment:starViewAsAttachment];
NSMutableAttributedString *hotelName= [[NSMutableAttributedString alloc] initWithString: viewModel.hotelDisplayName];
/** 
 * Here I'm adding a space after NSTextAttachment just to make sure that
 * the NSTextAttachment will auto change to next line like normal text does.
 * Otherwise the NSTextAttachment does not move to the new line.
 */
[hotelName appendAttributedString: [[NSAttributedString alloc] initWithString:@" "]];
self.myUILabel.attributedText = hotelName;
</code></pre>

<p>```</p>

<h4>A Little Bit More</h4>

<p>Notice that in my case, Stars are one component but not individual separated elements. That being said, no matter how many stars it has, either 3 stars, 4 stars or 4.5 stars, it&rsquo;s all just one image. The reason that I made it in one image is not that we can&rsquo;t use multiple <code>NSTextAttachment</code> in a text, but if we do, each <code>NSTextAttachment</code> will be treated as different words. Therefor it may results in situation that the stars might be separated into two different lines when the space is not enough. But that&rsquo;s not what we want, we want all stars in the same line, either at the <strong>current line</strong> if there&rsquo;s enough space or <strong>next line</strong> if there&rsquo;s no enough space.</p>

<p>While as we all know, the raw image for it will only include one star, and it&rsquo;s suppose for us to use to build multiple stars. And the following is how I build this component based on a single image. The component itself is a subclass of UIView. And you got to find yourself a way to turn a <code>UIView</code> into a <code>UIImage</code>, it&rsquo;s not hard.</p>

<p>```objectivec
&ndash; (void)buildViewBasedOnStarNumber {</p>

<pre><code>NSUInteger starCount = [self.starNumber integerValue];
BOOL isHalfStar = ([self.starNumber floatValue] - starCount) &gt; 0 ? YES : NO;

UIImageView *star1 = [[UIImageView alloc] initWithImage:[UIImage imageNamed: @"ic_star"]];
CGFloat starWidth = CGRectGetWidth(star1.bounds);
CGFloat starHeight = CGRectGetHeight(star1.bounds);
[self setFrame:CGRectMake(0, 0, starWidth * (isHalfStar ? starCount + 1 : starCount), starHeight)];

for (int n = 0; n &lt; starCount; n++) {
    UIImageView *star = [[UIImageView alloc] initWithImage:[UIImage imageNamed: @"ic_star"]];
    [star setFrame:CGRectMake(starWidth * n, 0, starWidth, starHeight)];
    [self addSubview:star];
}

if (isHalfStar) {
    UIImageView *halfStar = [[UIImageView alloc] initWithImage:[UIImage imageNamed: @"ic_star_half"]];
    [halfStar setFrame:CGRectMake(starWidth * starCount, 0, starWidth, starHeight)];
    [self addSubview:halfStar];
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manage Xcode project using Github]]></title>
    <link href="http://zhuhuihuihui.github.io/blog/2014/07/24/link-a-xcode-project-to-github-repo/"/>
    <updated>2014-07-24T17:52:58+07:00</updated>
    <id>http://zhuhuihuihui.github.io/blog/2014/07/24/link-a-xcode-project-to-github-repo</id>
    <content type="html"><![CDATA[<p>Use <a href="github.com">Github</a> to source control your Xcode project is really cool and rather convenient. Many of you may have tried to upload or link your current Xcode project to Github, but found it’s annoying because you always got some slight problems that stopped you from reaching there.</p>

<p>Here, i’d like to tell you a really simple way to quickly upload  your current project, or a new project, to Github and start to source control it immediately.</p>

<p>Few things that should be prepared before start:</p>

<ul>
<li>A Github account</li>
<li>Github app for Mac, <a href="https://mac.github.com">download</a> the latest version.</li>
<li>A Xcode project that you’d like to push onto Github</li>
</ul>


<p>Okay, now if you’re ready, let’s start.</p>

<h2>Step 1, Create a new repository where you wanna push your project to.</h2>

<p>Here i’ve create a new repo called <strong>MyXcodeProject</strong>
<img src="https://dl.dropboxusercontent.com/s/wqlezx8mv34t2xn/Create%20Project%20on%20Github.png" alt="" /></p>

<p>Once it has been successfully created, you shall see your new repo like this
<img src="https://dl.dropboxusercontent.com/s/8id6wdkl5f877mf/successfully%20created%20repo.png" alt="" /></p>

<h2>Step 2, Open <a href="https://mac.github.com">Github for Mac</a> Client, find and download the project that you just create.</h2>

<p>Open the Client, select <code>File -&gt; New Repository</code>  or simply press <code>command + N</code>, find the project that we just created under  <strong>Clone</strong> tap.
<img src="https://dl.dropboxusercontent.com/s/ww0rv8k7piqln6h/find%20the%20repo%20just%20create.png" alt="" /></p>

<p>Press the <strong>Clone MyXcodeProject</strong> button, choose whatever directory that you want to put this project, <strong>/Desktop</strong> for example. Once it’s successfully cloned, you shall see something like this.
<img src="https://dl.dropboxusercontent.com/s/jwwjw9fer9a1oh3/successfully%20downloaded%20the%20repo.png" alt="" /></p>

<h2>Step 3, Move your own project into the <strong>MyXcodeProject</strong> folder that you just cloned.</h2>

<p>At this stage, you should have an almost empty folder that you just cloned from the Github server.
<img src="https://dl.dropboxusercontent.com/s/6ju9sv4nbiv1pya/empty%20cloned%20folder.png" alt="" /></p>

<p>Also, you need to have your own project that you want to push onto github. It could be any projects, either a new project or a old project that you’ve been developed for years.</p>

<p>I just created a new project called <strong>MyXcodeProjectDemo</strong>, and i want it managed by Github under source control.
<img src="https://dl.dropboxusercontent.com/s/iw7mwucuz08sscb/your%20own%20project.png" alt="" /></p>

<p>Now, move all files and folders under your <strong>MyXcodeProjectDemo</strong> project into the previous cloned folder, like this.
<img src="https://dl.dropboxusercontent.com/s/p1mqwfeql1wph8w/Move%20into%20new%20folder.png" alt="" /></p>

<h2>Step 4, In the Github for Mac client, commit all changes that you’ve just made.</h2>

<p>Open up you Github client for Mac, click on the <strong>MyXcodeProject</strong> tab on the very left side. You could see quit a lot changes here, Woooooo.
<img src="https://dl.dropboxusercontent.com/s/9rmgz6p344fwjjv/commit%20changes.png" alt="" /></p>

<p>Press the Commit&amp;Sync button. Once it’s be been successfully committed and synced, open <a href="https://github.com">Github</a> page, find the corresponding  repository page, you should see the whole project should have been uploaded.
Before you go to the next step, please <strong>copy the link of your repo</strong>, you can do this by clicking the place where my arrow pointing to in the image.</p>

<p><img src="https://dl.dropboxusercontent.com/s/12oc8iyhwixuvhb/uploaded%20page.png" alt="" /></p>

<h2>Step 5, Open Xcode, check out the project from your Github repo</h2>

<p>Close Github client for Mac, delete all the files and folders you created before, including <strong>MyXcodeProject</strong> and <strong>MyXcodeProjectDemo</strong>. Yes, you don’t need them any more, it’s all being managed by Github already!</p>

<p>Open the Xcode application, select <code>Check out an existing project</code>.
In the next page, you’ll be able to select on a repo to check out, or in this case, you should <strong>paste</strong> the link of your repo into the textfield.</p>

<p><img src="https://dl.dropboxusercontent.com/s/848mc6fu1r6lwmi/check%20out.png" alt="" /></p>

<p>Select a proper location that you’d like to put your project for  long term.</p>

<h2><strong>Once it’s finished, you’ll have the project ready for you to develop with source control by Github enabled. Try to make your first modification on the source code, then commit&amp;push it to Github &ndash; <em>in Xcode select <code>Source Control -&gt; commit</code> or press <code>shift + command + C</code>, and make sure you’ve checked the <code>push to remote</code> in the following window </em></strong>.</h2>

<p><img src="https://dl.dropboxusercontent.com/s/nkrdq6aus7u2wnk/commit.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS7 Auto Layout]]></title>
    <link href="http://zhuhuihuihui.github.io/blog/2014/07/22/ios7-auto-layout/"/>
    <updated>2014-07-22T21:33:56+07:00</updated>
    <id>http://zhuhuihuihui.github.io/blog/2014/07/22/ios7-auto-layout</id>
    <content type="html"><![CDATA[<p>If you don’t supply any constraints at all, Xcode <strong>automatically</strong> assigns a set of default constraints, known as the automatic constraints. <em>It does this at compile time when your app is built, not at design time.</em></p>

<p>Xcode only creates automatic constraints if you did not set any constraints of your own. As soon as you add a single constraint, you tell Xcode that you’re now taking responsibility for this view. Xcode will no longer make any automatic constraints and expects you to add any other constraints this view needs.</p>

<p>When it comes to Auto Layout, <strong>orange is bad</strong>. Interface Builder drew two orange boxes: The <code>dashed box</code> displays the view’s frame according to Auto Layout. The <code>solid orange box</code> is the view’s frame according to how you placed it in the scene.</p>

<p><img src="http://cdn2.raywenderlich.com/wp-content/uploads/2013/09/Constraints-button-top-right.png" title="dashed box &amp; solid orange box" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use NSCoding]]></title>
    <link href="http://zhuhuihuihui.github.io/blog/2014/02/24/how-to-use-nscoding/"/>
    <updated>2014-02-24T23:09:04+07:00</updated>
    <id>http://zhuhuihuihui.github.io/blog/2014/02/24/how-to-use-nscoding</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s say you want to archive or save a object called <code>City</code>. The <code>City.h</code> is declared as below:
```objectivec</p>

<pre><code>@interface City : NSObject

@property (nonatomic, strong) NSString *name;
@property (nonatomic, strong) NSString *state;
@property (nonatomic) NSInteger population;
@property (nonatomic, strong) NSString *note;

@end
</code></pre>

<p>```</p>

<p>The first thing you need to do is to make your class confirm to <code>NSCoding</code> protocol. This is simply telling the system,</p>

<blockquote><p>&ldquo;Ok, i&rsquo;m gonna use NSCoding to help archive and unarchive this class.&rdquo;</p></blockquote>

<p>Next, you need to add two methods to your <code>City.h</code>, which will actually help you doing the archive and unarchive works.
```objectivec</p>

<pre><code>- (id)initWithCoder:(NSCoder *)aDecoder;

- (void)encodeWithCoder:(NSCoder *)aCoder;
</code></pre>

<p><code>
You will need to implement these two methods by yourself, but you will never call these two method manually. We will explain it later. Add implementation of these two methods to `City.m`,
</code>objectivec</p>

<pre><code>- (void)encodeWithCoder:(NSCoder *)aCoder
{
    [aCoder encodeObject:self.name forKey:@"name"];
    [aCoder encodeObject:self.state forKey:@"state"];
    [aCoder encodeObject:[NSNumber numberWithInteger:self.population] forKey:@"population"];
    [aCoder encodeObject:self.note forKey:@"note"];
}

- (id)initWithCoder:(NSCoder *)aDecoder
{
    self = [super init];
    if (self)
    {
        self.name = [aDecoder decodeObjectForKey:@"name"];
        self.state = [aDecoder decodeObjectForKey:@"state"];
        self.population = [[aDecoder decodeObjectForKey:@"population"] integerValue];
        self.note = [aDecoder decodeObjectForKey:@"note"];
    }
    return self;
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
